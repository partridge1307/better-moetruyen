generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  name        String?       @unique
  image       String?
  banner      String?
  verified    Boolean       @default(false)
  manga       Manga[]
  comment     Comment[]
  commentVote CommentVote[]
  createAt    DateTime      @default(now())
}

model Manga {
  id           Int           @id @default(autoincrement())
  name         String
  author       MangaAuthor[]
  description  Json
  image        String
  facebookLink String?
  discordLink  String?
  tags         Tag[]
  chapter      Chapter[]
  creator      User          @relation(fields: [creatorId], references: [id])
  creatorId    String
  isPublished  Boolean       @default(false)
  view         View?
  comment      Comment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name, creatorId])
}

model MangaAuthor {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  manga Manga[]

  @@index([name])
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  category    String
  manga       Manga[]
}

model Chapter {
  id           Int          @id @default(autoincrement())
  chapterIndex Int          @default(1)
  name         String?
  images       String[]
  volume       Int
  manga        Manga        @relation(fields: [mangaId], references: [id])
  mangaId      Int
  isPublished  Boolean      @default(false)
  comment      Comment[]
  dailyView    DailyView[]
  weeklyView   WeeklyView[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum VoteType {
  UP_VOTE
  DOWN_VOTE
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  manga     Manga         @relation(fields: [mangaId], references: [id])
  mangaId   Int
  chapter   Chapter?      @relation(fields: [chapterId], references: [id])
  chapterId Int?
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId Int?
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  type      VoteType

  @@id([userId, commentId])
}

model View {
  manga      Manga        @relation(fields: [mangaId], references: [id])
  mangaId    Int
  totalView  Int
  dailyView  DailyView[]
  weeklyView WeeklyView[]

  @@id([mangaId])
}

model DailyView {
  id        Int      @id @default(autoincrement())
  view      View     @relation(fields: [mangaId], references: [mangaId])
  mangaId   Int
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
  createdAt DateTime @default(now())
}

model WeeklyView {
  id        Int      @id @default(autoincrement())
  view      View     @relation(fields: [mangaId], references: [mangaId])
  mangaId   Int
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
  createdAt DateTime @default(now())
}
